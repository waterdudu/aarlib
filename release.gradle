// Definitions of release tasks.
// In order to upload jars to maven repository run:
// $ ./gradlew [-P askForPasswords=true] uploadArchives
// "-P askForPasswords" is optional. Including it in the command will force
// gradle to ask you for passwords rather than read them from gradle.properties.
//
// In order to upload jars to local maven repository run:
//$ ./gradlew -P repositoryUrl=file://localhost/ uploadArchives


apply plugin: 'maven'
apply plugin: 'signing'

def isReleaseBuild() {
    return VERSION_NAME.contains("SNAPSHOT") == false
}

def getRepositoryUrl() {
    return hasProperty('repositoryUrl') ? property('repositoryUrl') : "http://mvn.corp.mycompany.com/nexus/content/repositories/android-repo"
}

def getRepositoryUsername() {
    return hasProperty('repositoryUsername') ? property('repositoryUsername') : ""
}

def getRepositoryPassword() {
    return hasProperty('repositoryPassword') ? property('repositoryPassword') : ""
}

afterEvaluate { project ->
    task androidJavadoc(type: Javadoc) {
        source = android.sourceSets.main.java.srcDirs
        exclude '**/pom.xml'
        exclude '**/proguard_annotations.pro'
        classpath += files(android.bootClasspath)
    }

    task androidJavadocJar(type: Jar) {
        classifier = 'javadoc'
        from androidJavadoc.destinationDir
    }

    task androidSourcesJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.srcDirs
    }

    android.libraryVariants.all { variant ->
        def name = variant.name.capitalize()
        task "jar${name}"(type: Jar, dependsOn: variant.javaCompile) {
            from variant.javaCompile.destinationDir
        }
    }

    artifacts.add('archives', androidJavadocJar)
    artifacts.add('archives', androidSourcesJar)

    version = VERSION_NAME
    group = GROUP

    signing {
        required { isReleaseBuild() && gradle.taskGraph.hasTask("uploadArchives") }
        sign configurations.archives
    }

    uploadArchives {
        configuration = configurations.archives
        repositories.mavenDeployer {
            beforeDeployment {
                MavenDeployment deployment -> signing.signPom(deployment)
            }

            repository(url: getRepositoryUrl()) {
                authentication(
                        userName: getRepositoryUsername(),
                        password: getRepositoryPassword())
            }

            pom.project {
                name POM_NAME
                artifactId POM_ARTIFACT_ID
                packaging POM_PACKAGING
                description POM_DESCRIPTION
                url 'https://git.mycompany.com/#/admin/projects/aarlib'

                developers {
                    developer {
                        id 'aarlibdeveloper'
                        name 'aarlibdeveloper'
                    }
                }
            }
        }
    }
}

